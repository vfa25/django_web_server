"""
Django settings for djangoServer project.

Generated by 'django-admin startproject' using Django 2.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import sys
import datetime

# 导入个人配置
from djangoServer.myconfig import my_config, YUNPIAN_API_KEY

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# 添加检索路径
sys.path.insert(0, BASE_DIR)
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))
sys.path.insert(0, os.path.join(BASE_DIR, 'extra_apps'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'n_+o62(mk)#m&aei!grh%n=9ey4y&v4*cnq@z%*+ftj%$88*%-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', '47.110.224.7', 'www.vfa25.cn']

# 日志测试
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'null': {
            'class': 'logging.NullHandler',
        },
    },
    'loggers': {
        'django.template': {
            'handlers': ['null'],
            'propagate': False,
        },
    }
}

# 自定义认证后端
AUTHENTICATION_BACKENDS = (
    'users.views.CustomBackend',
)

# Application definition

INSTALLED_APPS = [
    # 在生成 users（AUTH_USER_MODEL）数据表前，先把首行admin注释掉，否则users表无法生成，
    # 并与之后放开，否则/admin无法访问
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 业务app
    'users.apps.UsersConfig',
    'antd_cmp.apps.AntdCmpConfig',
    'reward.apps.RewardConfig',
    'user_operation.apps.UserOperationConfig',
    # 富文本编辑器
    'DjangoUeditor',
    # xadmin后台管理系统
    'xadmin',
    'crispy_forms',
    # DRF
    'rest_framework',
    # filters开源应用
    'django_filters',
    # core跨域放行 https://pypi.org/project/django-cors-headers/2.5.3/
    # 'corsheaders'
    # 'captcha'
    # 服务端登录使用了token认证模式 https://www.django-rest-framework.org/api-guide/authentication/
    # 'rest_framework.authtoken'
]

# 自定义model名: app + class
AUTH_USER_MODEL = 'users.UserProfile'

# cors 跨域放行
# CORS_ORIGIN_ALLOW_ALL = True

# 中间件执行顺序：
# process_request 会从前至后；process_response 会从后至前
MIDDLEWARE = [
    # 'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'apps.utils.middleware.SimpleMiddleware'
]


ROOT_URLCONF = 'djangoServer.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'djangoServer.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': my_config['MYSQL_DBNAME'],
        'USER': my_config['MYSQL_USER'],
        'PASSWORD': my_config['MYSQL_PASSWORD'],
        'HOST': my_config['MYSQL_HOST'],
        'PORT': my_config['MYSQL_PORT'],
        'OPTIONS': {
            'init_command': 'SET default_storage_engine=INNODB;',
            # "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
            # "init_command": "SET foreign_key_checks=0;"
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# 这里若为True，则会取UTC时间，改取本地时间
USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

# 该属性用于prd
# STATIC_ROOT = os.path.join(BASE_DIR, 'static')
# 该属性用以dev
# STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        # 'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 下方的两个 DRF authentication 是默认设置，且所做的逻辑并不多，仅取出了request.user
        # 作用是使接口文档的登录API同步
        # 登录本质仍依赖于django的原生中间件 AuthenticationMiddleware 和 SessionMiddleware
        # 'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication'
    ]
}


JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=7),
    'JWT_AUTH_HEADER_PREFIX': 'JWT'
}

#手机号码正则表达式
REGEX_MOBILE = '^1[358]\d{9}$|^147\d{8}$|^176\d{8}$'

APPEND_SLASH = False
